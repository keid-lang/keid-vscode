{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Keid",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#namespaces"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#statements"
        },
        {
            "include": "#types"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#variables"
        }
    ],
    "repository": {
        "namespaces": {
            "match": "\\b(namespace)\\s+([A-Za-z0-9_:]+)\\b",
            "captures": {
                "1": {
                    "name": "constant.language"
                },
                "2": {
                    "name": "variable.name"
                }
            }
        },
        "keywords": {
            "name": "constant.language",
            "match": "\\b(extern|static|true|false|public|this|let|constructor|destructor|null)\\b"
        },
        "statements": {
            "name": "keyword.control",
            "match": "\\b(ref|deref|if|else|while|for|in|free|boxed|loop|break|continue|return)\\b"
        },
        "numbers": {
            "patterns": [
                {
                    "match": "\\b([0-9]+)\\b",
                    "name": "constant.numeric"
                },
                {
                    "match": "\\b0x([0-9a-fA-F]+)\\b",
                    "name": "constant.numeric"
                }
            ]
        },
        "strings": {
            "name": "string",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape",
                    "match": "\\\\."
                }
            ]
        },
        "variables": {
            "name": "variable.name",
            "match": "\\b([A-Za-z0-9_]+)\\b"
        },
        "functions": {
            "patterns": [
                {
                    "match": "\\b(function)\\s+([A-Za-z0-9_]+)\\b",
                    "captures": {
                        "1": {
                            "name": "constant.language"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "([A-Za-z0-9_]+)\\s*\\(([A-Za-z0-9_]+)\\s*:\\s*([A-Za-z0-9_&:\\[\\]<>\\?]+)\\s*,?\\s*\\):\\s*([A-Za-z0-9_&:\\[\\]<>\\?]+)",
                    "captures": {
                        "1": {
                            "name": "entity.name.function"
                        },
                        "2": {
                            "name": "entity.name.class"
                        }
                    }
                },
                {
                    "match": "([A-Za-z0-9_]+)\\s*\\(",
                    "captures": {
                        "1": {
                            "name": "entity.name.function"
                        }
                    }
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "match": "\\b(implement)\\s+([A-Za-z0-9_&:\\[\\]<>\\?]+)\\s+(for)\\s+([A-Za-z0-9_&:\\[\\]<>\\?]+)\\b",
                    "captures": {
                        "1": {
                            "name": "constant.language"
                        },
                        "2": {
                            "name": "entity.name.class"
                        },
                        "3": {
                            "name": "constant.language"
                        },
                        "4": {
                            "name": "entity.name.class"
                        }
                    }
                },
                {
                    "match": "\\b([A-Za-z0-9_]+):\\s*([A-Za-z0-9_&:\\[\\]<>\\?]+)\\b",
                    "captures": {
                        "1": {
                            "name": "variable.name"
                        },
                        "2": {
                            "name": "entity.name.class"
                        }
                    }
                },
                {
                    "match": "\\b(get|set)\\s+([A-Za-z0-9_]+):\\s*([A-Za-z0-9_&:\\[\\]<>\\?]+)\\b",
                    "captures": {
                        "1": {
                            "name": "constant.language"
                        },
                        "2": {
                            "name": "entity.name.function"
                        },
                        "3": {
                            "name": "entity.name.class"
                        }
                    }
                },
                {
                    "match": "\\b(as)\\s*([A-Za-z0-9_&:\\[\\]<>\\?]+)\\b",
                    "captures": {
                        "1": {
                            "name": "constant.language"
                        },
                        "2": {
                            "name": "entity.name.class"
                        }
                    }
                },
                {
                    "match": "->\\s*([A-Za-z0-9_&:\\[\\]<>\\?]+)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.class"
                        }
                    }
                },
                {
                    "match": "\\b(class|interface)\\s+([A-Za-z0-9_&:\\[\\]<>\\?]+)\\b",
                    "captures": {
                        "1": {
                            "name": "constant.language"
                        },
                        "2": {
                            "name": "entity.name.class"
                        }
                    }
                },
                {
                    "match": "\\b(type)\\s+([A-Za-z0-9_]+)\\s*=\\s*([A-Za-z0-9_&:\\[\\]<>\\?]+)\\b",
                    "captures": {
                        "1": {
                            "name": "constant.language"
                        },
                        "2": {
                            "name": "entity.name.class"
                        },
                        "3": {
                            "name": "entity.name.class"
                        }
                    }
                },
                {
                    "match": "\\b(new)\\s+([A-Za-z0-9_&:\\[\\]<>\\?]+)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.control"
                        },
                        "2": {
                            "name": "entity.name.class"
                        }
                    }
                },
                {
                    "match": "\\b(import)\\s+([A-Za-z0-9_&:\\[\\]<>\\?]+)\\s+(from)\\s+([A-Za-z0-9_: ]+)\\b",
                    "captures": {
                        "1": {
                            "name": "constant.language"
                        },
                        "2": {
                            "name": "entity.name.class"
                        },
                        "3": {
                            "name": "constant.language"
                        },
                        "4": {
                            "name": "variable.name"
                        }
                    }
                }
            ]
        },
        "comments": {
            "name": "comment",
            "begin": "//",
            "end": "\\n"
        }
    },
    "scopeName": "source.keid"
}
